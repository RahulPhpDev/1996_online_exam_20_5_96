public function upload_image(Request $request){
      $CKEditor = Input::get('CKEditor');
        $funcNum = Input::get('CKEditorFuncNum');
        $message = $url = '';
        if (Input::hasFile('upload')) {
            $file = Input::file('upload');
            if ($file->isValid()) {
                $filename = $file->getClientOriginalName();
                $fpath = base_path().'/images/equation_icon/';
                 $file->move($fpath, $filename);
                $url = url('/')."/images/equation_icon/". $filename;
            } else {
                $message = 'An error occured while uploading the file.';
            }
        } else {
            $message = 'No file uploaded.';
        }
      $arr = array('fileName' =>  $filename, 'uploaded' => 1, "url" => "$url");

    echo json_encode($arr);
  }

ALTER TABLE `exams` ADD `max_attempt` TINYINT NOT NULL DEFAULT '1' COMMENT '0->forever' AFTER `exam_visible_status`;
ALTER TABLE `exams` ADD `show_answer` TINYINT NOT NULL DEFAULT '1' AFTER `max_attempt`;
ALTER TABLE `users` ADD `register_from` TINYINT NOT NULL DEFAULT '0' COMMENT '0=>web,1=>google,3=>fb' AFTER `phone_no`;
ALTER TABLE users add register_id varchar(30) AFTER register_from

namespace Laravel\Socialite\Two;
 public function redirect()
    {
        $state = null;

        if ($this->usesState()) {
        //         echo $this->getState();die();
        // session(['start_time' => $time]);
        //     $this->request->session(['state', $state = $this->getState()]);

             $state = $this->getState();
            $this->request->session(['state'=> $state]);
        }

        return new RedirectResponse($this->getAuthUrl($state));
    }

     public function user()
    {
        // if ($this->hasInvalidState()) {
        //     throw new InvalidStateException;
        // }

        $response = $this->getAccessTokenResponse($this->getCode());

        $user = $this->mapUserToObject($this->getUserByToken(
            $token = Arr::get($response, 'access_token')
        ));

        return $user->setToken($token)
                    ->setRefreshToken(Arr::get($response, 'refresh_token'))
                    ->setExpiresIn(Arr::get($response, 'expires_in'));
    }

    
CREATE TABLE `feedbacks` (
  `id` int(11) UNSIGNED NOT NULL,
  `name` varchar(50) NOT NULL,
  `email` varchar(50) NOT NULL,
  `subject` varchar(255) NOT NULL,
  `message` text NOT NULL,
  `add_date` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Indexes for dumped tables
--

--
-- Indexes for table `feedbacks`
--
ALTER TABLE `feedbacks`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `feedbacks`
--
ALTER TABLE `feedbacks`
  MODIFY `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT;
COMMIT;




CREATE TABLE `email_forward` (
  `id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `email` varchar(255) NOT NULL,
  `alert_id` int(11) NOT NULL,
  `sujbect` mediumtext NOT NULL,
  `message` longtext NOT NULL,
  `send_date` datetime NOT NULL,
  `status` tinyint(4) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Indexes for dumped tables
--

--
-- Indexes for table `email_forward`
--
ALTER TABLE `email_forward`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `email_forward`
--
ALTER TABLE `email_forward`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
COMMIT;