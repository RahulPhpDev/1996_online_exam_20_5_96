// $(document).ready(function(){
// $('#selectAll').click(function() {
// // $('.chkselect').prop('checked', this.checked);});
// // $(this).bind("contextmenu", function(e) {e.preventDefault();});
// });

function show_modal(target)
{
    waitingDialog.show();
    target=target;
    $('#targetModal').load(target, function() {
        $('#targetModal').modal('show');
        waitingDialog.hide();
    });
}   
$(document).ready(function(){
    $('.multiselectgrp').multiselect({includeSelectAllOption: true,
     allSelectedText: getLocale('All Selected'),filterPlaceholder: getLocale('Search'),nonSelectedText: getLocale('None selected'),selectAllText: getLocale('Select All'),enableFiltering: true,enableCaseInsensitiveFiltering: true});
    // binds form submission and fields to the validation engine
    $('form').validationEngine();
    });
function check_perform_delete()
{
    var numberOfChecked = $('.chkselect:checked').length;
    if(numberOfChecked==0)
    alert(getLocale("Please Select Any Record"));
    else
    {
        if(confirm(getLocale("Do You Want To Delete")+" " +numberOfChecked+" "+getLocale("Record")))
        document.deleteallfrm.submit();
    }
}
// document.onkeydown = function (e) {
//     e = e || window.event;//Get event
//     if (e.ctrlKey) {
//         var c = e.which || e.keyCode;//Get key code
//         switch (c) {
//             case 83://Block Ctrl+S
//             case 87://Block Ctrl+W --Not work in Chrome
//             case 85://Block Ctrl+U
//             case 65://Block Ctrl+A
//             case 67://Block Ctrl+C
//             case 88://Block Ctrl+X
//             case 86://Block Ctrl+V
//             case 80://Block Ctrl+P
//             case 73://Block Cltr+Shift+I
//             case 67://Block Cltr+Shift+C
//             case 75://Block Cltr+Shift+K
//             case 81://Block Cltr+Shift+Q
//                 e.preventDefault();     
//                 e.stopPropagation();
//             break;
//         }
//         if(c==80){
//             if (navigator.userAgent.match(/msie/i) || navigator.userAgent.match(/trident/i) ){
//                 alert("You can not print");}
//         }
//     }
//     if (e.shiftKey) {
//         var c = e.which || e.keyCode;//Get key code
//         switch (c) {
//             case 116://Block Shift+F5
//             case 118://Block Shift+F7
//             e.preventDefault();     
//             e.stopPropagation();
//             break;
//         }
//     }
//     var c=e.keyCode;
//     switch (c) {
//         case 123://Block F12        
//         e.preventDefault();     
//                 e.stopPropagation();
//                 break;
//     }
// };
function showpop_up(page) {
	createPopUp(page,"New Window","yes","no");
}
function createPopUp(theURL, Name, scroll, resize) {
	var winWidth = screen.width-16;
	var winHeight = screen.height-106;
	winProp = 'width='+winWidth+',height='+winHeight+',left='+0+',top='+0+',scrollbars='+scroll+',resizable='+resize+',minimizable=no';
	window.open(theURL, "", winProp);
	}
window.onresize = function() 
{
    var winWidth = screen.width;
    var winHeight = screen.height;
    window.resizeTo(winWidth,winHeight);
}
window.onclick = function() 
{
    var winWidth = screen.width;
    var winHeight = screen.height;
    window.resizeTo(winWidth,winHeight);
}


  function watchfun(diff){
// console.log('here');
    // Never assume one widget is just used once in the page. You might
    // think of adding a second one. So, we adjust accordingly.
    $('.stopwatch').each(function () {

        // Cache very important elements, especially the ones used always
        var element = $(this);
        var running = element.data('autostart');
        var hoursElement = element.find('.hours');
        var minutesElement = element.find('.minutes');
        var secondsElement = element.find('.seconds');
       // alert(secondsElement);
        var millisecondsElement = element.find('.milliseconds');
        var toggleElement = element.find('.toggle');
        var resetElement = element.find('.reset');
        var pauseText = toggleElement.data('pausetext');
        var resumeText = toggleElement.data('resumetext');
        var startText = toggleElement.text();

        // And it's better to keep the state of time in variables 
        // than parsing them from the html.
        var hours, minutes, seconds, milliseconds, timer;

        function prependZero(time, length) {
            // Quick way to turn number to string is to prepend it with a string
            // Also, a quick way to turn floats to integers is to complement with 0
            time = '' + (time | 0);
            // And strings have length too. Prepend 0 until right.
            while (time.length < length) time = '0' + time;
            return time;
        }

        function setStopwatch(hours, minutes, seconds, milliseconds) {
            // Using text(). html() will construct HTML when it finds one, overhead.
            hoursElement.text(prependZero(hours, 2));
            minutesElement.text(prependZero(minutes, 2));
            secondsElement.text(prependZero(seconds, 2));
            millisecondsElement.text(prependZero(milliseconds, 3));
        }

        // Update time in stopwatch periodically - every 25ms
        function runTimer() {
            
            if( diff != 0){
                console.log(diff);
                var getTimer = diff.split(":");
                console.log(getTimer[2]);
                hours = parseInt(getTimer[0]);
                minutes = parseInt(getTimer[1]);
                seconds = parseInt(getTimer[2]);
            }
            // Using ES5 Date.now() to get current timestamp            
            var startTime = Date.now();
            var prevHours = hours;
            var prevMinutes = minutes;
            var prevSeconds = seconds;
            var prevMilliseconds = milliseconds;

            timer = setInterval(function () {
                var timeElapsed = Date.now() - startTime;
               
                hours = (timeElapsed / 3600000) + prevHours;
                minutes = ((timeElapsed / 60000) + prevMinutes) % 60;
                seconds = ((timeElapsed / 1000) + prevSeconds) % 60;
                milliseconds = (timeElapsed + prevMilliseconds) % 1000;

                setStopwatch(hours, minutes, seconds, milliseconds);
            }, 25);
        }

        // Split out timer functions into functions.
        // Easier to read and write down responsibilities
        function run() {
            running = true;
            runTimer();
            toggleElement.text(pauseText);
        }

        // function pause() {
        //     running = false;
        //     clearTimeout(timer);
        //     toggleElement.text(resumeText);
        // }

        function reset() {
            running = false;
            // pause();
            hours = minutes = seconds = milliseconds = 0;
            setStopwatch(hours, minutes, seconds, milliseconds);
            toggleElement.text(startText);
        }

        // And button handlers merely call out the responsibilities
        // toggleElement.on('click', function () {
        //     (running) ? pause() : run();
        // });

        // resetElement.on('click', function () {
        //     reset();
        // });

        // Another advantageous thing about factoring out functions is that
        // They are reusable, callable elsewhere.
        reset();
        if(running == false) run();
    });

}